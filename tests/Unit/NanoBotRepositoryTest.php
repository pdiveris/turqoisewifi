<?php

namespace Tests\Unit;

use Tests\TestCase;
use App\NanoBotId;
use App\InMemoryPersistence;
use App\NanoBot;
use App\NanoBotRepository;

class NanoBotRepositoryTest extends TestCase
{
    /**
     * @var NanoBotRepository
     */
    private $repository;

    protected function setUp(): void
    {
        parent::setUp();
        $this->repository = new NanoBotRepository(new InMemoryPersistence());
    }

    /**
     * Test whether IDs get generated by repository
     */
    public function testCanGenerateId()
    {
        $this->assertEquals(1, $this->repository->generateId()->toInt());
    }

    /**
     * @expectedException \OutOfBoundsException
     * @expectedExceptionMessage NanoBot with id 103 does not exist
     */
    public function testThrowsExceptionWhenTryingToFindNanoBotWhichDoesNotExist()
    {
        $this->repository->findById(NanoBotId::fromInt(103));
    }

    public function testCanPersistPostDraft()
    {
        $nanBotId = $this->repository->generateId();

        $nanoBot = NanoBot::create($nanBotId, 112, 321, 908, -1923);
        $this->repository->save($nanoBot);

        $this->repository->findById($nanBotId);

        $this->assertEquals($nanBotId, $this->repository->findById($nanBotId)->getId());
        $this->assertEquals(112, $nanoBot->getXPos());
    }

    /**
     * @expectedException \Exception
     * @expectedExceptionMessage Invalid path specified
     */
    public function testThrowsExceptionWhenTryingToLoadDataFromInvalidFile()
    {
      NanoBotRepository::loadFromFile(app_path('../database/nanobots.wrong'), new InMemoryPersistence());
    }

    public function testLoadsDataCorrectlyFromValidFile()
    {
        NanoBotRepository::resetInstance();
        $repo = NanoBotRepository::loadFromFile(app_path('../database/nanobots.data'), new InMemoryPersistence());
        $this->assertEquals(count($repo->all()),1000 );
    }

    /**
     * Test whether NanoBot's inRange method returns the correct value for given data
     * In this instance we should be getting back 613, as checked end of May 2019
     * @see https://adventofcode.com/2018/day/23
     *
     * @throws \Exception
     */
    public function testHowManyInRangeOfTop()
    {
        NanoBotRepository::resetInstance();
        $repository  = NanoBotRepository::loadFromFile(app_path('../database/nanobots.data'), new InMemoryPersistence());
        $topNano = $repository->findTopNanoBot();
        $inRange = $topNano->inRange($repository);
        $this->assertEquals($inRange, 613);
    }
}
